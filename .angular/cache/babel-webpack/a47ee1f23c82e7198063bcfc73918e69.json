{"ast":null,"code":"import { AnswerState } from '../answer/answer.component';\nimport { environment } from './../../environments/environment';\nimport * as confetti from 'canvas-confetti';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/backend.service\";\nimport * as i2 from \"../services/highscore.service\";\nimport * as i3 from \"../services/sound.service\";\nimport * as i4 from \"../services/tts.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"../services/settings.service\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"../answer/answer.component\";\nimport * as i10 from \"@angular/material/icon\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/input\";\nimport * as i14 from \"@angular/forms\";\n\nfunction GameComponent_div_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_0_button_3_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const d_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.setDifficulty(d_r7);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const d_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", d_r7.name, \" \");\n  }\n}\n\nfunction GameComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2, \"W\\u00E4hle deinen Schwierigkeitsgrad\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, GameComponent_div_0_button_3_Template, 2, 1, \"button\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.difficulties);\n  }\n}\n\nfunction GameComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"h2\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.countdown);\n  }\n}\n\nfunction GameComponent_div_2_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵelementStart(1, \"mat-icon\", 10);\n    i0.ɵɵtext(2, \"favorite\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return [];\n};\n\nfunction GameComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵelementStart(2, \"span\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 7);\n    i0.ɵɵtemplate(5, GameComponent_div_2_span_5_Template, 3, 0, \"span\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"app-answer\", 9);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_app_answer_click_10_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.chooseAnswer(1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"app-answer\", 9);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_app_answer_click_11_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.chooseAnswer(2);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"app-answer\", 9);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_app_answer_click_12_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.chooseAnswer(3);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"app-answer\", 9);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_2_Template_app_answer_click_13_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.chooseAnswer(4);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" Punkte: \", ctx_r2.points, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(12, _c0).constructor(ctx_r2.lives));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.question.question);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.pointsForQuestion);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"answer\", ctx_r2.question.answer_1)(\"state\", ctx_r2.answerState.answer_1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"answer\", ctx_r2.question.answer_2)(\"state\", ctx_r2.answerState.answer_2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"answer\", ctx_r2.question.answer_3)(\"state\", ctx_r2.answerState.answer_3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"answer\", ctx_r2.question.answer_4)(\"state\", ctx_r2.answerState.answer_4);\n  }\n}\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"wrong\": a0,\n    \"right\": a1\n  };\n};\n\nfunction GameComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c1, ctx_r3.result.state == \"wrong\", ctx_r3.result.state == \"right\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.result.text, \"\\n\");\n  }\n}\n\nfunction GameComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \"M\\u00F6chtest du diese in die Highscore-Liste eintragen?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"mat-form-field\", 12);\n    i0.ɵɵelementStart(6, \"mat-label\");\n    i0.ɵɵtext(7, \"Dein Name:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 13);\n    i0.ɵɵlistener(\"ngModelChange\", function GameComponent_div_4_Template_input_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.name = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵelementStart(10, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_4_Template_button_click_10_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.inputHighscore();\n    });\n    i0.ɵɵtext(11, \" Eintragen \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function GameComponent_div_4_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.doNotInputHighscore();\n    });\n    i0.ɵɵtext(13, \" Nein Danke \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Herzlichen Gl\\u00FCckwunsch, du hast \", ctx_r4.points, \" Punkte!\");\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r4.name);\n  }\n}\n\nfunction GameComponent_div_5_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Danke f\\u00FCr deinen Eintrag!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction GameComponent_div_5_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"\\u00A0\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c2 = function () {\n  return [\"/spiel\"];\n};\n\nconst _c3 = function () {\n  return [\"/highscores\"];\n};\n\nfunction GameComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, GameComponent_div_5_p_1_Template, 2, 0, \"p\", 0);\n    i0.ɵɵtemplate(2, GameComponent_div_5_p_2_Template, 2, 0, \"p\", 0);\n    i0.ɵɵelementStart(3, \"button\", 15);\n    i0.ɵɵtext(4, \" Nochmal Spielen! \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"br\");\n    i0.ɵɵelementStart(6, \"button\", 16);\n    i0.ɵɵtext(7, \"Highscores\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.entry === true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.entry === false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(4, _c2));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(5, _c3));\n  }\n}\n\nexport let GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor(backend, highscoreService, renderer2, elementRef, sounds, tts, route, settings) {\n      this.backend = backend;\n      this.highscoreService = highscoreService;\n      this.renderer2 = renderer2;\n      this.elementRef = elementRef;\n      this.sounds = sounds;\n      this.tts = tts;\n      this.route = route;\n      this.settings = settings;\n      this.state = GameState.Start;\n      this.difficulties = [];\n      this.config = {\n        countdown: 3,\n        lives: 3\n      };\n      this.points = 0;\n      this.pointsForQuestion = 10; // max points per Question\n\n      this.maxPointsPerQuestion = 10;\n      this.pointLossTime = 1500;\n      this.questionNumber = 0;\n      this.usedQuestions = []; //ids of questions that have been used in this round\n\n      this.answerState = {\n        answer_1: AnswerState.Select,\n        answer_2: AnswerState.Select,\n        answer_3: AnswerState.Select,\n        answer_4: AnswerState.Select\n      };\n      this.showResult = false;\n      this.result = {\n        state: 'right',\n        text: ''\n      };\n      this.saveName = false;\n      this.name = '';\n      this.entry = false;\n      this.difficulties = this.backend.getDifficulties();\n      this.difficulty = this.difficulties[0];\n      this.countdown = this.config.countdown;\n      this.lives = this.config.lives;\n      this.question = this.backend.getRandomQuestion(this.difficulty);\n      this.usedQuestions.push(this.question.id);\n      this.name = localStorage.getItem(\"name\") || '';\n\n      if (!environment.production) {\n        this.route.queryParams.subscribe(params => {\n          if (params['points']) {\n            this.points = params['points'];\n          }\n\n          if (params['state']) {\n            let desiredState = params['state'];\n\n            switch (desiredState) {\n              case 'Countdown':\n                this.state = GameState.Countdown;\n                break;\n\n              case 'Again':\n                this.state = GameState.Again;\n                break;\n\n              case 'Highscore':\n                this.state = GameState.Highscore;\n                break;\n\n              case 'Game':\n                this.state = GameState.Game;\n                break;\n\n              default:\n                this.state = GameState.Start;\n                break;\n            }\n          }\n        });\n      }\n    }\n\n    ngOnInit() {}\n\n    setDifficulty(difficulty) {\n      this.difficulty = difficulty;\n      this.state = GameState.Countdown;\n      this.countdown = this.config.countdown;\n\n      if (environment.flags.countdown) {\n        this.countdownInterval = setInterval(() => {\n          this.count();\n        }, 1000);\n      } else {\n        this.state = GameState.Game;\n        this.readQuestion(this.question);\n        this.pointsInterval = setInterval(() => {\n          if (this.pointsForQuestion > 1) {\n            this.pointsForQuestion--;\n          }\n        }, this.pointLossTime);\n      }\n    }\n\n    count() {\n      console.log(new Date().toLocaleTimeString() + ': ' + this.countdown);\n\n      if (this.countdown > 1) {\n        this.countdown--;\n      } else {\n        clearInterval(this.countdownInterval);\n        this.state = GameState.Game;\n        this.readQuestion(this.question);\n        this.pointsInterval = setInterval(() => {\n          if (this.pointsForQuestion > 1) {\n            this.pointsForQuestion--;\n          }\n        }, this.pointLossTime);\n      }\n    }\n\n    chooseAnswer(answer) {\n      if (this.showResult) {\n        return;\n      }\n\n      clearInterval(this.pointsInterval);\n      this.showResult = true;\n\n      if (this.question.answer === answer) {\n        this.questionNumber++;\n        this.points += this.pointsForQuestion;\n        this.result.state = 'right';\n        this.result.text = 'Richtig!';\n        this.sounds.correct();\n        this.tts.stop();\n        this.tts.say(this.result.text);\n        this.surprise();\n      } else {\n        this.result.state = 'wrong';\n        this.result.text = 'Leider Falsch!';\n        this.sounds.wrong();\n        this.tts.stop();\n        this.tts.say(this.result.text + ' Richtig wäre gewesen: ' + this.getAnswer(this.question));\n        this.lives--;\n      }\n\n      this.backend.postStats(this.question, answer, this.result.state === 'right').subscribe();\n\n      switch (this.question.answer) {\n        case 1:\n          this.answerState.answer_1 = AnswerState.Right;\n          this.answerState.answer_2 = AnswerState.Wrong;\n          this.answerState.answer_3 = AnswerState.Wrong;\n          this.answerState.answer_4 = AnswerState.Wrong;\n          break;\n\n        case 2:\n          this.answerState.answer_1 = AnswerState.Wrong;\n          this.answerState.answer_2 = AnswerState.Right;\n          this.answerState.answer_3 = AnswerState.Wrong;\n          this.answerState.answer_4 = AnswerState.Wrong;\n          break;\n\n        case 3:\n          this.answerState.answer_1 = AnswerState.Wrong;\n          this.answerState.answer_2 = AnswerState.Wrong;\n          this.answerState.answer_3 = AnswerState.Right;\n          this.answerState.answer_4 = AnswerState.Wrong;\n          break;\n\n        case 4:\n          this.answerState.answer_1 = AnswerState.Wrong;\n          this.answerState.answer_2 = AnswerState.Wrong;\n          this.answerState.answer_3 = AnswerState.Wrong;\n          this.answerState.answer_4 = AnswerState.Right;\n          break;\n      }\n\n      setTimeout(() => {\n        if (this.lives > 0) {\n          this.showResult = false;\n\n          if (this.canvas) {\n            this.myConfetti.reset();\n            this.renderer2.removeChild(this.elementRef.nativeElement, this.canvas);\n          }\n\n          this.answerState.answer_1 = AnswerState.Select;\n          this.answerState.answer_2 = AnswerState.Select;\n          this.answerState.answer_3 = AnswerState.Select;\n          this.answerState.answer_4 = AnswerState.Select;\n          this.question = this.backend.getRandomQuestion(this.difficulty, this.usedQuestions);\n          this.usedQuestions.push(this.question.id);\n          this.pointsForQuestion = this.maxPointsPerQuestion;\n          this.readQuestion(this.question);\n          this.pointsInterval = setInterval(() => {\n            if (this.pointsForQuestion > 1) {\n              this.pointsForQuestion--;\n            }\n          }, this.pointLossTime);\n        } else {\n          this.result.text = 'Spielende';\n          setTimeout(() => {\n            this.showResult = false;\n            this.state = GameState.Highscore;\n          }, 1000);\n        }\n      }, 4000);\n    }\n\n    surprise() {\n      if (this.settings.getAnimations()) {\n        this.canvas = this.renderer2.createElement('canvas');\n        this.renderer2.addClass(this.canvas, 'top');\n        this.renderer2.appendChild(this.elementRef.nativeElement, this.canvas);\n        this.myConfetti = confetti.create(this.canvas, {\n          resize: true // will fit all screen sizes\n\n        });\n        this.myConfetti({\n          particleCount: 100,\n          spread: 60,\n          origin: {\n            y: 1,\n            x: 0.5\n          },\n          zIndex: 200 // any other options from the global\n          // confetti function\n\n        });\n      }\n    }\n\n    inputHighscore() {\n      localStorage.setItem(\"name\", this.name);\n      this.highscoreService.enterScore({\n        username: this.name,\n        score: this.points.toString(),\n        difficulty: this.difficulty.id\n      }).subscribe(result => {\n        console.log('score entered');\n        this.entry = true;\n        this.state = GameState.Again;\n      });\n    }\n\n    doNotInputHighscore() {\n      this.entry = false;\n      this.state = GameState.Again;\n    }\n\n    readQuestion(question) {\n      this.tts.stop();\n      this.tts.say(question.question + ', A, ' + question.answer_1 + ', B, ' + question.answer_2 + ', C, ' + question.answer_3 + ', D, ' + question.answer_4);\n    }\n\n    getAnswer(question) {\n      switch (question.answer) {\n        case 1:\n          return question.answer_1;\n\n        case 2:\n          return question.answer_2;\n\n        case 3:\n          return question.answer_3;\n\n        case 4:\n          return question.answer_4;\n\n        default:\n          return 'Error';\n      }\n    }\n\n  }\n\n  GameComponent.ɵfac = function GameComponent_Factory(t) {\n    return new (t || GameComponent)(i0.ɵɵdirectiveInject(i1.BackendService), i0.ɵɵdirectiveInject(i2.HighscoreService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.SoundService), i0.ɵɵdirectiveInject(i4.TtsService), i0.ɵɵdirectiveInject(i5.ActivatedRoute), i0.ɵɵdirectiveInject(i6.SettingsService));\n  };\n\n  GameComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameComponent,\n    selectors: [[\"app-game\"]],\n    decls: 6,\n    vars: 6,\n    consts: [[4, \"ngIf\"], [\"id\", \"result\", 3, \"ngClass\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"class\", \"big-button\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"big-button\", 3, \"click\"], [\"id\", \"countdown\"], [\"id\", \"status\"], [\"id\", \"score\"], [\"id\", \"lives\"], [4, \"ngFor\", \"ngForOf\"], [3, \"answer\", \"state\", \"click\"], [\"matRipple\", \"\"], [\"id\", \"result\", 3, \"ngClass\"], [\"id\", \"nameInput\", \"appearance\", \"legacy\"], [\"matInput\", \"\", \"placeholder\", \"Dein Name\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"half-button\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"big-button\", 3, \"routerLink\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"start-button\", 3, \"routerLink\"]],\n    template: function GameComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, GameComponent_div_0_Template, 4, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, GameComponent_div_1_Template, 3, 1, \"div\", 0);\n        i0.ɵɵtemplate(2, GameComponent_div_2_Template, 14, 13, \"div\", 0);\n        i0.ɵɵtemplate(3, GameComponent_div_3_Template, 2, 5, \"div\", 1);\n        i0.ɵɵtemplate(4, GameComponent_div_4_Template, 14, 2, \"div\", 0);\n        i0.ɵɵtemplate(5, GameComponent_div_5_Template, 8, 6, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.state === \"Start\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.state === \"Countdown\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.state === \"Game\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showResult);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.state === \"Highscore\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.state === \"Again\");\n      }\n    },\n    directives: [i7.NgIf, i7.NgForOf, i8.MatButton, i9.AnswerComponent, i10.MatIcon, i11.MatRipple, i7.NgClass, i12.MatFormField, i12.MatLabel, i13.MatInput, i14.DefaultValueAccessor, i14.NgControlStatus, i14.NgModel, i5.RouterLink],\n    styles: [\".big-button[_ngcontent-%COMP%]{font-size:xx-large;padding:20px;width:90%;margin-bottom:20px}.half-button[_ngcontent-%COMP%]{font-size:xx-large;padding:20px;width:45%;margin:10px}#status[_ngcontent-%COMP%]{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit;margin-top:15px;font-size:1.2em}#lives[_ngcontent-%COMP%]{text-shadow:2px 2px 3px grey;color:#a5cd22;margin-left:auto}.material-icons[_ngcontent-%COMP%]{font-size:48px}.mat-icon[_ngcontent-%COMP%]{height:48px;width:48px;transition:all .4s ease-in-out}#countdown[_ngcontent-%COMP%]{font-size:8rem;color:#9b1430}#result[_ngcontent-%COMP%]{font-size:xx-large;border-width:2px;border-style:solid;padding:20px;margin:10px}.right[_ngcontent-%COMP%]{color:green;border-color:green!important;background-color:#adff2f}.wrong[_ngcontent-%COMP%]{color:red;border-color:red!important;background-color:#ffa07a}.top[_ngcontent-%COMP%]{position:absolute;height:100%;width:100%;top:0;left:0;z-index:120}mat-label[_ngcontent-%COMP%]{color:#000}\"]\n  });\n  return GameComponent;\n})();\nvar GameState = /*#__PURE__*/(() => {\n  (function (GameState) {\n    GameState[\"Start\"] = \"Start\";\n    GameState[\"Countdown\"] = \"Countdown\";\n    GameState[\"Game\"] = \"Game\";\n    GameState[\"Highscore\"] = \"Highscore\";\n    GameState[\"Again\"] = \"Again\";\n  })(GameState || (GameState = {}));\n\n  return GameState;\n})();","map":null,"metadata":{},"sourceType":"module"}