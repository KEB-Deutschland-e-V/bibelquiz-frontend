{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BackendService = /*#__PURE__*/(() => {\n  class BackendService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.questions = [];\n      this.difficulties = [];\n      this.dataOK = false;\n    }\n\n    init() {\n      return new Promise((resolve, reject) => {\n        this.httpClient.get(environment.backend + '/questions').subscribe(data => {\n          this.questions = data;\n          this.httpClient.get(environment.backend + '/difficulties').subscribe(data => {\n            this.difficulties = data;\n            this.dataOK = true;\n            resolve(this.dataOK);\n          }, error => {\n            this.dataOK = false;\n            resolve(this.dataOK);\n          });\n        }, error => {\n          this.dataOK = false;\n          resolve(this.dataOK);\n        });\n      });\n    }\n\n    getRandomQuestion(difficulty, usedIDs = []) {\n      const filtered = this.questions.filter(q => {\n        return q.difficulty === parseInt(difficulty.id) && !usedIDs.includes(q.id);\n      });\n      return filtered[Math.floor(Math.random() * filtered.length)];\n    }\n\n    getDifficulties() {\n      return this.difficulties;\n    }\n\n    postStats(question, answer, correct) {\n      return this.httpClient.post(environment.backend + '/stat', {\n        question: question.id,\n        answer: answer,\n        correct: correct ? '1' : '0'\n      }, {\n        headers: new HttpHeaders({\n          'Accept': 'text/html, application/xhtml+xml, */*',\n          'Content-Type': 'application/json'\n        }),\n        responseType: 'text'\n      });\n    }\n\n  }\n\n  BackendService.ɵfac = function BackendService_Factory(t) {\n    return new (t || BackendService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BackendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BackendService,\n    factory: BackendService.ɵfac,\n    providedIn: 'root'\n  });\n  return BackendService;\n})();","map":null,"metadata":{},"sourceType":"module"}